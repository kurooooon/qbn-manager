/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivateRouteImport } from './routes/_private/route'
import { Route as IndexImport } from './routes/index'
import { Route as PrivateFacilitatorsIndexImport } from './routes/_private/facilitators/index'

// Create/Update Routes

const PrivateRouteRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PrivateFacilitatorsIndexRoute = PrivateFacilitatorsIndexImport.update({
  id: '/facilitators/',
  path: '/facilitators/',
  getParentRoute: () => PrivateRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRoute
    }
    '/_private/facilitators/': {
      id: '/_private/facilitators/'
      path: '/facilitators'
      fullPath: '/facilitators'
      preLoaderRoute: typeof PrivateFacilitatorsIndexImport
      parentRoute: typeof PrivateRouteImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteRouteChildren {
  PrivateFacilitatorsIndexRoute: typeof PrivateFacilitatorsIndexRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateFacilitatorsIndexRoute: PrivateFacilitatorsIndexRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PrivateRouteRouteWithChildren
  '/facilitators': typeof PrivateFacilitatorsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PrivateRouteRouteWithChildren
  '/facilitators': typeof PrivateFacilitatorsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_private/facilitators/': typeof PrivateFacilitatorsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/facilitators'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/facilitators'
  id: '__root__' | '/' | '/_private' | '/_private/facilitators/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_private"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_private": {
      "filePath": "_private/route.tsx",
      "children": [
        "/_private/facilitators/"
      ]
    },
    "/_private/facilitators/": {
      "filePath": "_private/facilitators/index.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
